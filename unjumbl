<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>UnJumbl - The Ultimate 9-Letter Challenge</title>
<style>
  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    max-width: 480px;
    margin: 40px auto;
    background: #fafafa;
    color: #202124;
    user-select: none;
    text-align: center;
  }

  h1#title {
    font-size: 3rem;
    font-weight: 900;
    margin-bottom: 0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    color: #5a5a5a;
    letter-spacing: 3px;
  }

  #slogan {
    font-size: 1.1rem;
    color: #6c757d;
    margin-top: 4px;
    margin-bottom: 25px;
    font-style: italic;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  #howToBtn {
    position: fixed;
    top: 15px;
    right: 15px;
    background: #4285f4;
    border: none;
    color: white;
    font-weight: bold;
    font-size: 1.5rem;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    transition: background-color 0.3s ease;
    z-index: 1100;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  #howToBtn:hover {
    background: #3367d6;
  }

  #timer {
    position: fixed;
    top: 20px;
    left: 20px;
    font-weight: bold;
    font-size: 1.1rem;
    color: #5f6368;
    background: #e8f0fe;
    padding: 6px 12px;
    border-radius: 20px;
    user-select: none;
    font-family: monospace;
    z-index: 1100;
  }

  /* Letter colors*/
  .color-blue { background: #4285f4; }
  .color-red { background: #ea4335; }
  .color-yellow { background: #fbbc05; color: #333; }
  .color-green { background: #34a853; }
  .color-orange { background: #f3722c; }
  .color-purple { background: #8e24aa; color: white; }
  .color-teal { background: #009688; }
  .color-pink { background: #d81b60; }
  .color-cyan { background: #00bcd4; }

  #scrambled {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 10px;
    flex-wrap: nowrap;
  }

  .letter-bubble {
    width: 50px;
    height: 50px;
    border-radius: 12px;
    color: white;
    font-weight: 700;
    font-size: 2rem;
    line-height: 50px;
    user-select: none;
    cursor: pointer;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    transition: transform 0.15s ease;
  }
  .letter-bubble:active {
    transform: scale(0.85);
  }
  .letter-bubble.disabled {
    opacity: 0.4;
    cursor: default;
    pointer-events: none;
  }

  /* Guess input box styles */
  #guessInput {
    width: 320px;
    max-width: 100%;
    font-size: 1rem;
    padding: 20px 15px;
    border-radius: 12px;
    border: 2px solid #bbb;
    font-weight: 700;
    letter-spacing: 8px;
    text-transform: uppercase;
    text-align: center;
    outline-offset: 3px;
    user-select: text;
    box-shadow: inset 0 0 6px #ddd;
    margin: 0 auto 10px auto; 
    display: block;
  }
  #guessInput::placeholder {
    color: #bbb;
    font-style: italic;
    letter-spacing: 6px;
  }

  #buttonsRow {
    margin-top: 5px; 
    margin-bottom: 5px; 
  }
  button {
    margin: 0 6px;
    padding: 12px 25px;
    font-size: 1.1rem;
    border: none;
    border-radius: 12px;
    background-color: #4285f4;
    color: white;
    cursor: pointer;
    font-weight: 600;
    box-shadow: 0 4px 10px rgba(66, 133, 244, 0.6);
    transition: background-color 0.3s ease;
    user-select:none;
  }
  button:hover:not(:disabled) {
    background-color: #3367d6;
  }
  button:disabled {
    opacity: 0.6;
    cursor: default;
  }

  #message {
    margin-top: 25px;
    font-size: 1.3rem;
    min-height: 48px;
    font-weight: 600;
    color: #202124;
    min-height: 48px;
  }

  /* Previous guesses box */
  #guessHistory {
    margin-top: 20px;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
    font-family: monospace;
    user-select:none;
  }
  .guess-row {
    display: flex;
    justify-content: center;
    gap: 6px;
    margin-bottom: 8px;
  }
  .guess-letter {
    width: 32px;
    height: 40px;
    border-radius: 6px;
    background: #e8f0fe;
    color: #202124;
    font-weight: 700;
    font-size: 1.3rem;
    line-height: 40px;
    user-select:none;
    box-shadow: 0 2px 5px rgba(66, 133, 244, 0.4);
  }

  /* Keyboard */
  #keyboard {
    margin-top: 0;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
    user-select: none;
  }
  #keyboard .keyboard-row {
    display: flex;
    justify-content: center;
    margin-bottom: 6px; 
    gap: 12px;
  }
  #keyboard .key {
    display: inline-block;
    width: 38px;
    height: 50px;
    border-radius: 10px;
    background: #e8f0fe;
    box-shadow: 0 2px 5px rgba(66, 133, 244, 0.4);
    line-height: 50px;
    font-weight: 700;
    font-size: 1.3rem;
    color: #202124;
    cursor: pointer;
    user-select:none;
    transition: background-color 0.25s ease;
  }
  #keyboard .key:hover:not(.disabled) {
    background-color: #d2e3fc;
  }
  #keyboard .key.disabled {
    opacity: 0.5;
    cursor: default;
    pointer-events: none;
  }
  #keyboard .backspace-key {
    min-width: 60px;
  }
  #keyboard .clear-key {
    min-width: 80px;
  }

  /* Modal */
  #modalOverlay {
    display: none;
    position: fixed;
    top: 0; left: 0;
    width: 100vw; height: 100vh;
    background: rgba(0,0,0,0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  #modalOverlay.active {
    display: flex;
  }
  #modalContent {
    background: white;
    padding: 25px 30px;
    border-radius: 12px;
    max-width: 400px;
    text-align: left;
    box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    position: relative;
    user-select:none;
  }
  #modalContent h2 {
    margin-top: 0;
  }
  #modalContent button.closeBtn {
    position: absolute;
    top: 12px;
    right: 12px;
    background: transparent;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #888;
  }
  #modalContent button.closeBtn:hover {
    color: #333;
  }

  /* Copy stats area */
  #statsArea {
    margin-top: 30px;
    font-family: monospace;
    white-space: pre-line;
    background: #e8f0fe;
    padding: 12px 20px;
    border-radius: 12px;
    user-select: all;
  }
  #copyStatsBtn {
    margin-top: 10px;
    background: #34a853;
    box-shadow: 0 4px 10px rgba(52,168,83,0.7);
  }
  #copyStatsBtn:hover {
    background: #2c8c44;
  }

  /* Hint text below buttons */
  #hintText {
    margin-top: 10px;
    color: #5f6368;
    font-style: italic;
    font-size: 1rem;
    min-height: 24px;
  }

</style>
</head>
<body>

<button id="howToBtn" title="How to play?">?</button>
<div id="timer" aria-live="polite">Time: 0:00</div>

<h1 id="title">UnJumbl</h1>
<div id="slogan">The Ultimate 9-Letter Challenge</div>

<div id="scrambled" aria-label="Scrambled letters" role="list"></div>

<!-- Guess input box -->
<input 
  type="text" 
  id="guessInput" 
  maxlength="9" 
  placeholder="Enter 9 letters here" 
  autocomplete="off" 
  autocorrect="off" 
  autocapitalize="characters" 
  spellcheck="false" 
  aria-label="Your guess input"
/>

<div id="buttonsRow">
  <button id="guessBtn" disabled>Guess</button>
  <button id="hintBtn">Hint</button>
</div>

<div id="hintText" aria-live="polite"></div>

<div id="keyboard" aria-label="On-screen keyboard"></div>

<div id="message" role="alert"></div>

<div id="guessHistory" aria-label="Previous guesses"></div>

<!-- Modal -->
<div id="modalOverlay" role="dialog" aria-modal="true" aria-labelledby="modalTitle" aria-describedby="modalDesc">
  <div id="modalContent">
    <button class="closeBtn" aria-label="Close How to Play">&times;</button>
    <h2 id="modalTitle">How to Play</h2>
    <ol id="modalDesc" style="padding-left:1.2em;">
      <li>You have 9 scrambled letters to rearrange into a valid English word.</li>
      <li>Tap the letter tiles to select them and build your word in the answer area.</li>
      <li>Use all 9 letters to form your answer.</li>
      <li>A new puzzle is available every day. Track your progress and compete with friends!</li>
      <li><strong>ðŸ’¡ Tip:</strong> Look for common word patterns and prefixes/suffixes to help solve the puzzle faster.</li>
    </ol>
  </div>
</div>

<div id="statsArea" style="display:none;">
  <button id="copyStatsBtn">Copy Stats</button>
  <pre id="statsText"></pre>
</div>

<script>
(() => {
  const COLORS = [
    'color-blue',
    'color-red',
    'color-yellow',
    'color-green',
    'color-orange',
    'color-purple',
    'color-teal',
    'color-pink',
    'color-cyan'
  ];

  const puzzleNumber = 1;
  const answer = "SPECTACLE"; // 9-letter uppercase answer
  const hintTextContent = "An impressive show or display";

  // Shuffle function for scrambled letters
  function shuffle(word) {
    const arr = word.split('');
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
    return arr.join('');
  }

  let scrambled = shuffle(answer);
  while (scrambled === answer) scrambled = shuffle(answer);

  // Game state
  let guessLetters = [];
  let solved = false;
  let guessHistory = [];
  let startTime = null;
  let timerInterval = null;

  // DOM elements
  const scrambledDiv = document.getElementById('scrambled');
  const guessInput = document.getElementById('guessInput');
  const guessBtn = document.getElementById('guessBtn');
  const hintBtn = document.getElementById('hintBtn');
  const messageDiv = document.getElementById('message');
  const timerDiv = document.getElementById('timer');
  const keyboardDiv = document.getElementById('keyboard');
  const howToBtn = document.getElementById('howToBtn');
  const modalOverlay = document.getElementById('modalOverlay');
  const modalCloseBtn = document.querySelector('#modalContent .closeBtn');
  const statsArea = document.getElementById('statsArea');
  const copyStatsBtn = document.getElementById('copyStatsBtn');
  const statsText = document.getElementById('statsText');
  const hintText = document.getElementById('hintText');
  const guessHistoryDiv = document.getElementById('guessHistory');

  // Render scrambled letters bubbles
  function renderScrambled() {
    scrambledDiv.innerHTML = '';
    for (let i = 0; i < scrambled.length; i++) {
      const letter = scrambled[i];
      const bubble = document.createElement('div');
      bubble.className = `letter-bubble ${COLORS[i % COLORS.length]}`;
      bubble.textContent = letter;
      bubble.dataset.index = i;
      bubble.setAttribute('role', 'button');
      bubble.setAttribute('tabindex', '0');

      // Disable bubble if letter already selected in guessLetters
      // Count how many times letter selected
      const countSelected = guessLetters.filter(l => l === letter).length;
      // Count how many times letter appears up to this bubble index
      const countBefore = scrambled.slice(0, i).split('').filter(l => l === letter).length;

      if (countSelected > countBefore) {
        bubble.classList.add('disabled');
      }

      bubble.addEventListener('click', () => {
        if (solved) return;
        if (guessLetters.length >= 9) return;
        if (bubble.classList.contains('disabled')) return;

        guessLetters.push(letter);
        guessInput.value = guessLetters.join('');
        updateGuessBtn();
        renderScrambled();
        renderKeyboard();
      });

      bubble.addEventListener('keydown', e => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          bubble.click();
        }
      });

      scrambledDiv.appendChild(bubble);
    }
  }

  // Update Guess button enabled state
  function updateGuessBtn() {
    guessBtn.disabled = guessInput.value.length !== 9;
  }

  // Timer functions
  function startTimer() {
    startTime = Date.now();
    updateTimerDisplay();
    timerInterval = setInterval(updateTimerDisplay, 1000);
  }
  function updateTimerDisplay() {
    if (!startTime) {
      timerDiv.textContent = "Time: 0:00";
      return;
    }
    const diffMs = Date.now() - startTime;
    const totalSeconds = Math.floor(diffMs / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    timerDiv.textContent = `Time: ${minutes}:${seconds.toString().padStart(2, '0')}`;
  }
  function stopTimer() {
    clearInterval(timerInterval);
  }
  function getElapsedTimeSeconds() {
    return Math.floor((Date.now() - startTime) / 1000);
  }

  // Render guess history
  function renderGuessHistory() {
    guessHistoryDiv.innerHTML = '';
    guessHistory.forEach(g => {
      const row = document.createElement('div');
      row.className = 'guess-row';
      for (let letter of g) {
        const cell = document.createElement('div');
        cell.className = 'guess-letter';
        cell.textContent = letter;
        row.appendChild(cell);
      }
      guessHistoryDiv.appendChild(row);
    });
  }

  // Clear guess input and reset guessLetters
  function clearGuess() {
    guessLetters = [];
    guessInput.value = '';
    updateGuessBtn();
    renderScrambled();
    renderKeyboard();
  }

  // Disable inputs on solved
  function disableInput() {
    guessInput.disabled = true;
    guessBtn.disabled = true;
    hintBtn.disabled = true;
    const letterBubbles = scrambledDiv.querySelectorAll('.letter-bubble');
    letterBubbles.forEach(b => b.classList.add('disabled'));
    renderKeyboard();
  }

  // Handle guess submit
  function onGuess() {
    const guess = guessInput.value.toUpperCase();
    if (guess.length !== 9) {
      messageDiv.textContent = "Please enter exactly 9 letters.";
      return;
    }
    if (guess !== answer) {
      let correctSpots = 0;
      for (let i = 0; i < 9; i++) {
        if (guess[i] === answer[i]) correctSpots++;
      }
      messageDiv.textContent = `Not quite right. Letters in correct position: ${correctSpots}`;
      guessHistory.unshift(guess);
      if (guessHistory.length > 5) guessHistory.pop();
      renderGuessHistory();
      clearGuess();
    } else {
      solved = true;
      stopTimer();
      messageDiv.innerHTML = `<strong>Congratulations! You solved it in ${formatElapsedTime(getElapsedTimeSeconds())}!</strong>`;
      guessHistory.unshift(guess);
      if (guessHistory.length > 5) guessHistory.pop();
      renderGuessHistory();
      disableInput();
      showStats();
    }
  }

  // Format elapsed seconds into M:SS
  function formatElapsedTime(seconds) {
    const m = Math.floor(seconds / 60);
    const s = seconds % 60;
    return `${m}:${s.toString().padStart(2, '0')}`;
  }

  // Show Hint
  function showHint() {
    hintText.textContent = hintTextContent;
    hintBtn.disabled = true;
  }

  // Render on-screen keyboard (3x3 grid) with scrambled letters in random order plus backspace & clear
  function renderKeyboard() {
    keyboardDiv.innerHTML = '';

    const keys = scrambled.split('');

    for (let i = 0; i < 3; i++) {
      const rowDiv = document.createElement('div');
      rowDiv.className = 'keyboard-row';
      for (let j = 0; j < 3; j++) {
        const idx = i * 3 + j;
        const keyLetter = keys[idx];
        const keyDiv = document.createElement('div');
        keyDiv.className = 'key';
        keyDiv.textContent = keyLetter;
        keyDiv.setAttribute('role', 'button');
        keyDiv.tabIndex = 0;

        // Check if this key letter occurrence is already used in guessLetters
        let occurrenceCount = 0;
        for (let k = 0; k < idx; k++) {
          if (keys[k] === keyLetter) occurrenceCount++;
        }
        let usedCount = 0;
        for (const usedLetter of guessLetters) {
          if (usedLetter === keyLetter) usedCount++;
        }

        if (usedCount > occurrenceCount || solved) {
          keyDiv.classList.add('disabled');
          keyDiv.style.pointerEvents = 'none';
          keyDiv.style.opacity = '0.5';
        }

        keyDiv.addEventListener('click', () => {
          if (solved) return;
          if (guessLetters.length >= 9) return;
          let occurrenceCountInner = 0;
          for (let k = 0; k < idx; k++) {
            if (keys[k] === keyLetter) occurrenceCountInner++;
          }
          let usedCountInner = 0;
          for (const usedLetter of guessLetters) {
            if (usedLetter === keyLetter) usedCountInner++;
          }
          if (usedCountInner > occurrenceCountInner) return;

          guessLetters.push(keyLetter);
          guessInput.value = guessLetters.join('');
          updateGuessBtn();
          renderScrambled();
          renderKeyboard();
        });

        keyDiv.addEventListener('keydown', e => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            keyDiv.click();
          }
        });

        rowDiv.appendChild(keyDiv);
      }
      keyboardDiv.appendChild(rowDiv);
    }

    // Backspace and Clear row
    const ctrlRow = document.createElement('div');
    ctrlRow.className = 'keyboard-row';
    ctrlRow.style.justifyContent = 'center';
    ctrlRow.style.gap = '10px';

    const backspaceKey = document.createElement('div');
    backspaceKey.className = 'key backspace-key';
    backspaceKey.textContent = 'âŒ«';
    backspaceKey.title = 'Backspace';
    backspaceKey.setAttribute('role', 'button');
    backspaceKey.tabIndex = 0;
    backspaceKey.addEventListener('click', () => {
      if (guessLetters.length === 0) return;
      guessLetters.pop();
      guessInput.value = guessLetters.join('');
      updateGuessBtn();
      renderScrambled();
      renderKeyboard();
    });
    backspaceKey.addEventListener('keydown', e => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        backspaceKey.click();
      }
    });

    const clearKey = document.createElement('div');
    clearKey.className = 'key clear-key';
    clearKey.textContent = 'Clear';
    clearKey.title = 'Clear guess';
    clearKey.setAttribute('role', 'button');
    clearKey.tabIndex = 0;
    clearKey.addEventListener('click', () => {
      guessLetters = [];
      guessInput.value = '';
      updateGuessBtn();
      renderScrambled();
      renderKeyboard();
    });
    clearKey.addEventListener('keydown', e => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        clearKey.click();
      }
    });

    ctrlRow.appendChild(backspaceKey);
    ctrlRow.appendChild(clearKey);

    keyboardDiv.appendChild(ctrlRow);
  }

  // Show stats after solving
  function showStats() {
    const elapsed = getElapsedTimeSeconds();
    const timeStr = formatElapsedTime(elapsed);

    const statsStr = 
`UnJumbl Puzzle #${puzzleNumber}
Time: ${timeStr}
Guesses: ${guessHistory.length}

Thanks for playing!`;

    statsText.textContent = statsStr;
    statsArea.style.display = 'block';
  }

  // Copy stats to clipboard
  copyStatsBtn.addEventListener('click', () => {
    navigator.clipboard.writeText(statsText.textContent).then(() => {
      copyStatsBtn.textContent = 'Copied!';
      setTimeout(() => { copyStatsBtn.textContent = 'Copy Stats'; }, 2000);
    });
  });

  // Input event for guessInput
  guessInput.addEventListener('input', e => {
    const val = guessInput.value.toUpperCase().replace(/[^A-Z]/g, '');
    guessInput.value = val;
    guessLetters = val.split('');
    updateGuessBtn();
    renderScrambled();
    renderKeyboard();
  });

  // Guess button
  guessBtn.addEventListener('click', () => {
    onGuess();
  });

  // Hint button
  hintBtn.addEventListener('click', () => {
    showHint();
  });

  // How To button and modal
  howToBtn.addEventListener('click', () => {
    modalOverlay.classList.add('active');
  });
  modalCloseBtn.addEventListener('click', () => {
    modalOverlay.classList.remove('active');
  });
  modalOverlay.addEventListener('click', (e) => {
    if (e.target === modalOverlay) {
      modalOverlay.classList.remove('active');
    }
  });

  // Initialize game
  function init() {
    guessLetters = [];
    solved = false;
    guessHistory = [];
    startTime = null;
    messageDiv.textContent = '';
    hintText.textContent = '';
    guessInput.value = '';
    guessInput.disabled = false;
    guessBtn.disabled = true;
    hintBtn.disabled = false;
    statsArea.style.display = 'none';
    renderScrambled();
    renderKeyboard();
    renderGuessHistory();
    startTimer();
  }

  init();

})();
</script>

</body>
</html>
